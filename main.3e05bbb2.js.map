{"version":3,"sources":["scripts/main.js"],"names":["newEmployeeForm","tHead","document","querySelector","tBody","form","order","prevColumnName","addEventListener","e","sortRows","rows","target","innerText","selectedRow","closest","prevText","input","createElement","select","nameCell","cells","positionCell","officeCell","ageCell","salaryCell","optTokyo","Option","optSingapore","optLondon","optNewYork","optEdinburgh","optSanFrancisco","append","classList","add","selectedIndex","value","focus","ev","blur","test","pushNotification","remove","convertToCustomString","enter","key","preventDefault","formValidation","title","description","type","message","h2","p","className","setAttribute","textContent","body","style","boxSizing","setTimeout","arr","columnName","sortedRows","sort","a","b","localeCompare","parseInt","convertToNumber","reverse","str","number","slice","split","join","salaryStr","toLocaleString","clickedRow","forEach","tr","newForm","innerHTML","formName","data","FormData","dataName","get","dataPosition","dataOffice","dataAge","dataSalary","format","length","insertAdjacentHTML","reset"],"mappings":"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","file":"main.3e05bbb2.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nnewEmployeeForm();\n\nconst tHead = document.querySelector('thead');\nconst tBody = document.querySelector('tbody');\nconst form = document.querySelector('.new-employee-form');\n\nlet order = true;\nlet prevColumnName = null;\n\ntHead.addEventListener('click', e => {\n  const rows = [...tBody.rows];\n\n  sortRows(rows, e.target.innerText);\n  order = !order;\n});\n\ntBody.addEventListener('click', e => {\n  selectedRow(e.target.closest('tr'));\n});\n\ntBody.addEventListener('dblclick', e => {\n  const target = e.target.closest('td');\n  const prevText = target.innerText;\n  const input = document.createElement('input');\n  const select = document.createElement('select');\n  const nameCell = e.target.closest('tr').cells[0];\n  const positionCell = e.target.closest('tr').cells[1];\n  const officeCell = e.target.closest('tr').cells[2];\n  const ageCell = e.target.closest('tr').cells[3];\n  const salaryCell = e.target.closest('tr').cells[4];\n\n  if (officeCell === target) {\n    const optTokyo = new Option('Tokyo', 'Tokyo');\n    const optSingapore = new Option('Singapore', 'Singapore');\n    const optLondon = new Option('London', 'London');\n    const optNewYork = new Option('New York', 'New York');\n    const optEdinburgh = new Option('Edinburgh', 'Edinburgh');\n    const optSanFrancisco = new Option('San Francisco', 'San Francisco');\n\n    select.append(optTokyo, optSingapore, optLondon,\n      optNewYork, optEdinburgh, optSanFrancisco);\n\n    select.classList.add('cell-input');\n    select.selectedIndex = -1;\n    target.append(select);\n  } else {\n    input.classList.add('cell-input');\n    input.value = target.innerText;\n    target.innerText = '';\n    target.append(input);\n    input.focus();\n  }\n\n  select.addEventListener('change', (ev) => {\n    target.innerText = select.value;\n\n    select.blur();\n  });\n\n  input.addEventListener('blur', () => {\n    // No empty or whitespaces regex\n    if (/^\\s*$/.test(input.value)) {\n      pushNotification('Invalid data', 'Field must contain data', 'error');\n      target.innerText = prevText;\n      input.remove();\n\n      return;\n    }\n\n    if (nameCell === target || positionCell === target) {\n      // Letters and whitespaces regex\n      if (!/^[a-zA-Z\\s]*$/.test(input.value)) {\n        pushNotification('Invalid data',\n          'Field must contain just letters and whitespaces', 'error');\n        target.innerText = prevText;\n        input.remove();\n\n        return;\n      }\n    }\n\n    if (ageCell === target) {\n      // Numbers 18 - 90 range regex\n      if (!/^(18|[2-8][0-9]|90)$/.test(input.value)) {\n        pushNotification('Invalid data',\n          'Field must contain just numbers from 18 to 90', 'error');\n        target.innerText = prevText;\n        input.remove();\n\n        return;\n      }\n    }\n\n    if (salaryCell === target) {\n      // Just numbers regex\n      if (!/^\\d+$/.test(input.value)) {\n        pushNotification('Invalid data',\n          'Field must contain just numbers without \"$\" and \",\"', 'error');\n        target.innerText = prevText;\n        input.remove();\n\n        return;\n      }\n      input.value = convertToCustomString(input.value);\n    }\n\n    target.innerText = input.value;\n    input.remove();\n  });\n\n  input.addEventListener('keydown', (enter) => {\n    if (enter.key === 'Enter') {\n      input.blur();\n    }\n  });\n});\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n  formValidation(form);\n});\n\n// Notification implementation\nconst pushNotification = (title, description, type) => {\n  const message = document.createElement('div');\n  const h2 = document.createElement('h2');\n  const p = document.createElement('p');\n\n  message.className = `notification ${type}`;\n  message.setAttribute('data-qa', 'notification');\n  h2.className = 'title';\n  h2.textContent = title;\n  p.textContent = description;\n\n  message.append(h2, p);\n\n  document.body.append(message);\n\n  message.style.boxSizing = 'content-box';\n\n  setTimeout(() => {\n    message.remove();\n  }, 2000);\n};\n\n// Function to sort in two directions\nfunction sortRows(arr, columnName) {\n  let sortedRows = [];\n\n  switch (columnName) {\n    case 'Name':\n      sortedRows = arr.sort((a, b) =>\n        a.cells[0].innerText.localeCompare(b.cells[0].innerText)\n      );\n      break;\n    case 'Position':\n      sortedRows = arr.sort((a, b) =>\n        a.cells[1].innerText.localeCompare(b.cells[1].innerText)\n      );\n      break;\n    case 'Office':\n      sortedRows = arr.sort((a, b) =>\n        a.cells[2].innerText.localeCompare(b.cells[2].innerText)\n      );\n      break;\n    case 'Age':\n      sortedRows = arr.sort((a, b) =>\n        parseInt(a.cells[3].innerText)\n        - parseInt(b.cells[3].innerText)\n      );\n\n      break;\n    case 'Salary':\n      sortedRows = arr.sort((a, b) =>\n        convertToNumber(a.cells[4].innerText)\n        - convertToNumber(b.cells[4].innerText)\n      );\n      break;\n  }\n\n  if (columnName !== prevColumnName) {\n    order = true;\n  }\n\n  order ? tBody.append(...sortedRows) : tBody.append(...sortedRows.reverse());\n  prevColumnName = columnName;\n}\n\n// Function converts salary string to number\nfunction convertToNumber(str) {\n  const number = parseInt(str.slice(1).split(',').join(''));\n\n  return number;\n}\n\n// Function converts salary to custom String\nfunction convertToCustomString(str) {\n  const number = +str;\n  const salaryStr = number.toLocaleString();\n\n  return `$${salaryStr}`;\n}\n\n// When user clicks on a row, it should become selected.\nfunction selectedRow(clickedRow) {\n  const rows = [...tBody.rows];\n\n  rows.forEach(tr => tr.classList.remove('active'));\n  clickedRow.classList.add('active');\n}\n\n// Add form\nfunction newEmployeeForm() {\n  const newForm = document.createElement('form');\n\n  newForm.classList.add('new-employee-form');\n\n  newForm.innerHTML = `\n  <label>Name: <input name=\"name\" type=\"text\" data-qa=\"name\" required></label>\n  <label>Position:\n    <input name=\"position\" type=\"text\" data-qa=\"position\" required>\n  </label>\n  <label>Office: \n    <select name=\"office\" data-qa=\"office\" required>\n    <option value=\"Tokyo\">Tokyo</option>\n    <option value=\"Singapore\">Singapore</option>\n    <option value=\"London\">London</option>\n    <option value=\"New York\">New York</option>\n    <option value=\"Edinburgh\">Edinburgh</option>\n    <option value=\"San Francisco\">San Francisco</option>\n    </select>\n  </label>\n  <label>Age: <input name=\"age\" type=\"number\" data-qa=\"age\" required></label>\n  <label>Salary:\n    <input name=\"salary\" type=\"number\" data-qa=\"salary\" required>\n  </label>\n  <button type=\"submit\">Save to table</button>\n  `;\n\n  document.body.append(newForm);\n}\n\n// Form validation check\nfunction formValidation(formName) {\n  const data = new FormData(formName);\n\n  const dataName = data.get('name');\n  const dataPosition = data.get('position');\n  const dataOffice = data.get('office');\n  const dataAge = data.get('age');\n  const dataSalary = data.get('salary');\n  const format = /^[`!@#$%^&*()_+\\-=\\\\[\\]{};':\"\\\\|,.<>\\\\/?~\\d]*$/g;\n\n  if (dataName.length < 4) {\n    pushNotification('Invalid data', 'Name has less than 4 letters', 'error');\n\n    return;\n  }\n\n  if (+dataAge < 18 || +dataAge > 90) {\n    pushNotification('Invalid data',\n      'Age must be between 18 to 90 years old', 'error');\n\n    return;\n  }\n\n  if (format.test(dataName)) {\n    pushNotification('Invalid data',\n      'Name must contain just letters', 'error');\n\n    return;\n  }\n\n  if (format.test(dataPosition)) {\n    pushNotification('Invalid data',\n      'Position must contain just letters', 'error');\n\n    return;\n  }\n\n  tBody.insertAdjacentHTML('beforeend',\n    `<tr>\n    <td>${dataName}</td>\n    <td>${dataPosition}</td>\n    <td>${dataOffice}</td>\n    <td>${dataAge}</td>\n    <td>${convertToCustomString(dataSalary)}</td>\n    </tr>\n  `);\n\n  pushNotification('Success', 'Employee has been added to the list');\n\n  formName.reset();\n}\n"]}